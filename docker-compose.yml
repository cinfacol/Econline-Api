services:
    api:
        build:
            context: .
            dockerfile: ./docker/local/django/Dockerfile
        container_name: django_api
        command: /start
        volumes:
            - .:/app
            - static_volume:/app/staticfiles
            - logs_volume:/app/logs
            - media_volume:/app/mediafiles
            - redis_data:/data
        expose:
            - "8000"
        env_file:
            - .env
        depends_on:
            postgres-db:
                condition: service_healthy
            redis:
                condition: service_healthy
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        networks:
            - eline-front
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8000/api/health/"]
            interval: 10s
            timeout: 5s
            retries: 3
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    # client:
    #     build:
    #         context: ./client
    #         dockerfile: ./docker/local/Dockerfile
    #     container_name: react_client
    #     restart: on-failure
    #     volumes:
    #         - ./client:/app
    #         - /app/node_modules
    #     networks:
    #         - eline-front

    postgres-db:
        image: postgres:15.7-alpine
        container_name: postgres_db
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        networks:
            - eline-front
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 5s
            timeout: 3s
            retries: 5
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    redis:
        image: redis:7.4.1-alpine
        container_name: redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        command: redis-server --appendonly yes  # Para persistencia
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 3s
            retries: 5
        networks:
            - eline-front

    celery_worker:
        build:
            context: .
            dockerfile: ./docker/local/django/Dockerfile
        container_name: celery_worker
        command: /start-celery_worker
        volumes:
            - .:/app
        env_file:
            - .env
        depends_on:
            - redis
            - postgres-db
        networks:
            - eline-front
        healthcheck:
            test: ["CMD-SHELL", "celery -A config inspect ping"]
            interval: 10s
            timeout: 5s
            retries: 3
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    flower:
        build:
            context: .
            dockerfile: ./docker/local/django/Dockerfile
        container_name: flower
        command: /start-flower
        volumes:
            - .:/app
        env_file:
            - .env
        ports:
            - "5557:5555"
        depends_on:
            - redis
            - postgres-db
        networks:
            - eline-front

    nginx:
        depends_on:
            - api
        container_name: nginx
        volumes:
            - static_volume:/app/staticfiles
            - media_volume:/app/mediafiles
        build:
            context: ./docker/local/nginx
            dockerfile: Dockerfile
        ports:
            - "9090:80"
        networks:
            - eline-front
        healthcheck:
            test: ["CMD", "nginx", "-t"]
            interval: 10s
            timeout: 5s
            retries: 3
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

networks:
    eline-front:
        driver: bridge
    eline-backend:
        driver: bridge
        internal: true  # Solo accesible internamente

volumes:
    postgres_data:
        name: eline_postgres_data
        labels:
            - "com.example.description=PostgreSQL Data"
    static_volume:
        name: eline_static_data
        labels:
            - "com.example.description=Static Files"
    media_volume:
        name: eline_media_data
        labels:
            - "com.example.description=Media Files"
    redis_data:
        name: eline_redis_data
        labels:
            - "com.example.description=Redis Data"
    logs_volume:
        name: eline_logs_data
        labels:
            - "com.example.description=Logs Files"
