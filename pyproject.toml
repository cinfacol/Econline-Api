# Archivo pyproject.toml para proyecto Django con uv
# Configuración optimizada para aprovechar todas las ventajas de uv

[project]
name = "econline-api"
version = "0.1.0"
description = "Econline API - Django E-commerce Application"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "cinfacol", email = "cinfacol@gmail.com"},
]

# Dependencias principales de producción
dependencies = [
    "celery>=5.5.3",
    "redis>=6.4.0",
    "psycopg2-binary>=2.9.10",
    "django-cors-headers>=4.7.0",
    "django-environ>=0.12.0",
    "django-filter>=25.1",
    "django-countries>=7.6.1",
    "django-phonenumber-field>=8.1.0",
    "django-ratelimit>=4.1.0",
    "django-autoslug>=1.9.9",
    "django-cloudinary-storage>=0.3.0",
    "django-celery-email>=3.0.0",
    "django-templated-mail>=1.1.1",
    "cloudinary>=1.44.1",
    "stripe>=12.5.0",
    "braintree>=4.38.0",
    "channels>=4.3.1",
    "channels_redis>=4.3.0",
    "flower>=2.0.1",
    "drf-spectacular>=0.28.0",
    "djangorestframework-api-response>=0.1.0",
    "social-auth-app-django>=5.5.1",
    "social-auth-core>=4.7.0",
    "pillow>=11.3.0",
    "requests>=2.32.5",
    "structlog>=25.4.0",
    "humanize>=4.13.0",
    "Faker>=37.6.0",
    "python-dateutil>=2.9.0",
    "pytz>=2025.2",
    "pyyaml>=6.0.2",
    "urllib3>=2.5.0",
    "async-timeout>=5.0.1",
    "django-js-asset>=3.1.2",
    "phonenumbers>=9.0.13",
    "prometheus-client>=0.22.1",
    "pyjwt>=2.10.1",
    "watchdog>=6.0.0",
    "django==5.2.6",
    "djangorestframework-simplejwt==5.5.1",
    "djoser==2.3.3",
]

[project.optional-dependencies]
# Dependencias de desarrollo
dev = [
    "pytest>=7.4.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.6.0",
    "pre-commit>=3.3.0",
    "pip-review>=1.3.0",
    "watchdog>=6.0.0",
]

# Dependencias para testing
test = [
    "pytest>=7.4.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.1.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
]

# Dependencias para producción adicionales
prod = [
    "gunicorn>=21.2.0",
    "whitenoise>=6.5.0",
    "sentry-sdk>=1.32.0",
]

[tool.uv]
# Configuración específica para uv
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.6.0",
    "pre-commit>=3.3.0",
    "pip-review>=1.3.0",
    "watchdog>=6.0.0",
    "prompt-toolkit>=3.0.52",
]

[tool.ruff]
# Configuración de ruff (reemplaza black, flake8, isort, etc.)
line-length = 88
target-version = "py310"

# Incluir/excluir archivos
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
]

[tool.ruff.lint]
# Reglas de linting (equivalente a flake8 + más)
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "DJ",  # flake8-django
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within `except` clause, raise exceptions with `raise ... from err`
]

[tool.ruff.format]
# Configuración del formateador (reemplaza black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
# Configuración para import sorting (reemplaza isort)
force-single-line = false
force-sort-within-sections = false
combine-as-imports = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.test"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = [
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--no-migrations",
    "--reuse-db",
]
